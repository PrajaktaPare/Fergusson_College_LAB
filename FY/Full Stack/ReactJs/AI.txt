AI Assignments :

1. Water Jug using BFS
2. Water Jug (user input game type)

1. Missionaries and Cannibals using BFS
2. Missionaries and Cannibals (user input game type)

1. BFS (Best First Search) for Shortest Path


give me eparate separate java code and c code for this  in separate separate files for each questions
Below is the Java and C code for each of the assignments. Each problem is implemented in separate files as requested.

1. Water Jug Problem using BFS
Java Code: WaterJugBFS.java
java
Copy
import java.util.*;

class State {
    int x, y;
    State parent;

    State(int x, int y, State parent) {
        this.x = x;
        this.y = y;
        this.parent = parent;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        State state = (State) obj;
        return x == state.x && y == state.y;
    }

    @Override
    public int hashCode() {
        return Objects.hash(x, y);
    }
}

public class WaterJugBFS {
    static void printPath(State state) {
        if (state == null) return;
        printPath(state.parent);
        System.out.println("(" + state.x + ", " + state.y + ")");
    }

    static void solve(int jug1, int jug2, int target) {
        Queue<State> queue = new LinkedList<>();
        Set<State> visited = new HashSet<>();
        State initialState = new State(0, 0, null);
        queue.add(initialState);
        visited.add(initialState);

        while (!queue.isEmpty()) {
            State current = queue.poll();

            if (current.x == target || current.y == target) {
                System.out.println("Solution found:");
                printPath(current);
                return;
            }

            // Fill jug1
            State fillJug1 = new State(jug1, current.y, current);
            if (!visited.contains(fillJug1)) {
                queue.add(fillJug1);
                visited.add(fillJug1);
            }

            // Fill jug2
            State fillJug2 = new State(current.x, jug2, current);
            if (!visited.contains(fillJug2)) {
                queue.add(fillJug2);
                visited.add(fillJug2);
            }

            // Empty jug1
            State emptyJug1 = new State(0, current.y, current);
            if (!visited.contains(emptyJug1)) {
                queue.add(emptyJug1);
                visited.add(emptyJug1);
            }

            // Empty jug2
            State emptyJug2 = new State(current.x, 0, current);
            if (!visited.contains(emptyJug2)) {
                queue.add(emptyJug2);
                visited.add(emptyJug2);
            }

            // Pour jug1 to jug2
            int pourAmount = Math.min(current.x, jug2 - current.y);
            State pourJug1ToJug2 = new State(current.x - pourAmount, current.y + pourAmount, current);
            if (!visited.contains(pourJug1ToJug2)) {
                queue.add(pourJug1ToJug2);
                visited.add(pourJug1ToJug2);
            }

            // Pour jug2 to jug1
            pourAmount = Math.min(current.y, jug1 - current.x);
            State pourJug2ToJug1 = new State(current.x + pourAmount, current.y - pourAmount, current);
            if (!visited.contains(pourJug2ToJug1)) {
                queue.add(pourJug2ToJug1);
                visited.add(pourJug2ToJug1);
            }
        }

        System.out.println("No solution found.");
    }

    public static void main(String[] args) {
        int jug1 = 4, jug2 = 3, target = 2;
        solve(jug1, jug2, target);
    }
}
C Code: WaterJugBFS.c
c
Copy
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 100

typedef struct State {
    int x, y;
    struct State* parent;
} State;

State* createState(int x, int y, State* parent) {
    State* state = (State*)malloc(sizeof(State));
    state->x = x;
    state->y = y;
    state->parent = parent;
    return state;
}

bool isEqual(State* a, State* b) {
    return a->x == b->x && a->y == b->y;
}

void printPath(State* state) {
    if (state == NULL) return;
    printPath(state->parent);
    printf("(%d, %d)\n", state->x, state->y);
}

void solve(int jug1, int jug2, int target) {
    State* queue[MAX];
    int front = 0, rear = 0;
    State* visited[MAX];
    int visitedCount = 0;

    State* initialState = createState(0, 0, NULL);
    queue[rear++] = initialState;
    visited[visitedCount++] = initialState;

    while (front < rear) {
        State* current = queue[front++];

        if (current->x == target || current->y == target) {
            printf("Solution found:\n");
            printPath(current);
            return;
        }

        // Fill jug1
        State* fillJug1 = createState(jug1, current->y, current);
        bool isVisited = false;
        for (int i = 0; i < visitedCount; i++) {
            if (isEqual(fillJug1, visited[i])) {
                isVisited = true;
                break;
            }
        }
        if (!isVisited) {
            queue[rear++] = fillJug1;
            visited[visitedCount++] = fillJug1;
        }

        // Fill jug2
        State* fillJug2 = createState(current->x, jug2, current);
        isVisited = false;
        for (int i = 0; i < visitedCount; i++) {
            if (isEqual(fillJug2, visited[i])) {
                isVisited = true;
                break;
            }
        }
        if (!isVisited) {
            queue[rear++] = fillJug2;
            visited[visitedCount++] = fillJug2;
        }

        // Empty jug1
        State* emptyJug1 = createState(0, current->y, current);
        isVisited = false;
        for (int i = 0; i < visitedCount; i++) {
            if (isEqual(emptyJug1, visited[i])) {
                isVisited = true;
                break;
            }
        }
        if (!isVisited) {
            queue[rear++] = emptyJug1;
            visited[visitedCount++] = emptyJug1;
        }

        // Empty jug2
        State* emptyJug2 = createState(current->x, 0, current);
        isVisited = false;
        for (int i = 0; i < visitedCount; i++) {
            if (isEqual(emptyJug2, visited[i])) {
                isVisited = true;
                break;
            }
        }
        if (!isVisited) {
            queue[rear++] = emptyJug2;
            visited[visitedCount++] = emptyJug2;
        }

        // Pour jug1 to jug2
        int pourAmount = (current->x < jug2 - current->y) ? current->x : jug2 - current->y;
        State* pourJug1ToJug2 = createState(current->x - pourAmount, current->y + pourAmount, current);
        isVisited = false;
        for (int i = 0; i < visitedCount; i++) {
            if (isEqual(pourJug1ToJug2, visited[i])) {
                isVisited = true;
                break;
            }
        }
        if (!isVisited) {
            queue[rear++] = pourJug1ToJug2;
            visited[visitedCount++] = pourJug1ToJug2;
        }

        // Pour jug2 to jug1
        pourAmount = (current->y < jug1 - current->x) ? current->y : jug1 - current->x;
        State* pourJug2ToJug1 = createState(current->x + pourAmount, current->y - pourAmount, current);
        isVisited = false;
        for (int i = 0; i < visitedCount; i++) {
            if (isEqual(pourJug2ToJug1, visited[i])) {
                isVisited = true;
                break;
            }
        }
        if (!isVisited) {
            queue[rear++] = pourJug2ToJug1;
            visited[visitedCount++] = pourJug2ToJug1;
        }
    }

    printf("No solution found.\n");
}

int main() {
    int jug1 = 4, jug2 = 3, target = 2;
    solve(jug1, jug2, target);
    return 0;
}
2. Water Jug Problem (User Input Game Type)
Java Code: WaterJugUserInput.java
java
Copy
import java.util.Scanner;

public class WaterJugUserInput {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter jug1 capacity: ");
        int jug1 = scanner.nextInt();
        System.out.print("Enter jug2 capacity: ");
        int jug2 = scanner.nextInt();
        System.out.print("Enter target volume: ");
        int target = scanner.nextInt();

        WaterJugBFS.solve(jug1, jug2, target);
    }
}
C Code: WaterJugUserInput.c
c
Copy
#include <stdio.h>

void solve(int jug1, int jug2, int target);

int main() {
    int jug1, jug2, target;
    printf("Enter jug1 capacity: ");
    scanf("%d", &jug1);
    printf("Enter jug2 capacity: ");
    scanf("%d", &jug2);
    printf("Enter target volume: ");
    scanf("%d", &target);

    solve(jug1, jug2, target);
    return 0;
}
3. Missionaries and Cannibals Problem using BFS
Java Code: MissionariesAndCannibalsBFS.java
java
Copy
import java.util.*;

class State {
    int missionariesLeft, cannibalsLeft;
    boolean boat;
    State parent;

    State(int missionariesLeft, int cannibalsLeft, boolean boat, State parent) {
        this.missionariesLeft = missionariesLeft;
        this.cannibalsLeft = cannibalsLeft;
        this.boat = boat;
        this.parent = parent;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        State state = (State) obj;
        return missionariesLeft == state.missionariesLeft &&
               cannibalsLeft == state.cannibalsLeft &&
               boat == state.boat;
    }

    @Override
    public int hashCode() {
        return Objects.hash(missionariesLeft, cannibalsLeft, boat);
    }
}

public class MissionariesAndCannibalsBFS {
    static void printPath(State state) {
        if (state == null) return;
        printPath(state.parent);
        System.out.println("(" + state.missionariesLeft + ", " + state.cannibalsLeft + ", " + (state.boat ? "Right" : "Left") + ")");
    }

    static void solve() {
        Queue<State> queue = new LinkedList<>();
        Set<State> visited = new HashSet<>();
        State initialState = new State(3, 3, false, null);
        queue.add(initialState);
        visited.add(initialState);

        while (!queue.isEmpty()) {
            State current = queue.poll();

            if (current.missionariesLeft == 0 && current.cannibalsLeft == 0 && current.boat) {
                System.out.println("Solution found:");
                printPath(current);
                return;
            }

            // Generate all possible moves
            int[][] moves = {{1, 0}, {2, 0}, {0, 1}, {0, 2}, {1, 1}};
            for (int[] move : moves) {
                int missionaries = move[0], cannibals = move[1];
                if (current.boat) {
                    // Boat is on the right side
                    int newMissionariesLeft = current.missionariesLeft + missionaries;
                    int newCannibalsLeft = current.cannibalsLeft + cannibals;
                    if (newMissionariesLeft <= 3 && newCannibalsLeft <= 3 &&
                        (newMissionariesLeft == 0 || newMissionariesLeft >= newCannibalsLeft) &&
                        (3 - newMissionariesLeft == 0 || 3 - newMissionariesLeft >= 3 - newCannibalsLeft)) {
                        State newState = new State(newMissionariesLeft, newCannibalsLeft, false, current);
                        if (!visited.contains(newState)) {
                            queue.add(newState);
                            visited.add(newState);
                        }
                    }
                } else {
                    // Boat is on the left side
                    int newMissionariesLeft = current.missionariesLeft - missionaries;
                    int newCannibalsLeft = current.cannibalsLeft - cannibals;
                    if (newMissionariesLeft >= 0 && newCannibalsLeft >= 0 &&
                        (newMissionariesLeft == 0 || newMissionariesLeft >= newCannibalsLeft) &&
                        (3 - newMissionariesLeft == 0 || 3 - newMissionariesLeft >= 3 - newCannibalsLeft)) {
                        State newState = new State(newMissionariesLeft, newCannibalsLeft, true, current);
                        if (!visited.contains(newState)) {
                            queue.add(newState);
                            visited.add(newState);
                        }
                    }
                }
            }
        }

        System.out.println("No solution found.");
    }

    public static void main(String[] args) {
        solve();
    }
}
C Code: MissionariesAndCannibalsBFS.c
c
Copy
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX 100

typedef struct State {
    int missionariesLeft, cannibalsLeft;
    bool boat;
    struct State* parent;
} State;

State* createState(int missionariesLeft, int cannibalsLeft, bool boat, State* parent) {
    State* state = (State*)malloc(sizeof(State));
    state->missionariesLeft = missionariesLeft;
    state->cannibalsLeft = cannibalsLeft;
    state->boat = boat;
    state->parent = parent;
    return state;
}

bool isEqual(State* a, State* b) {
    return a->missionariesLeft == b->missionariesLeft &&
           a->cannibalsLeft == b->cannibalsLeft &&
           a->boat == b->boat;
}

void printPath(State* state) {
    if (state == NULL) return;
    printPath(state->parent);
    printf("(%d, %d, %s)\n", state->missionariesLeft, state->cannibalsLeft, state->boat ? "Right" : "Left");
}

void solve() {
    State* queue[MAX];
    int front = 0, rear = 0;
    State* visited[MAX];
    int visitedCount = 0;

    State* initialState = createState(3, 3, false, NULL);
    queue[rear++] = initialState;
    visited[visitedCount++] = initialState;

    while (front < rear) {
        State* current = queue[front++];

        if (current->missionariesLeft == 0 && current->cannibalsLeft == 0 && current->boat) {
            printf("Solution found:\n");
            printPath(current);
            return;
        }

        // Generate all possible moves
        int moves[5][2] = {{1, 0}, {2, 0}, {0, 1}, {0, 2}, {1, 1}};
        for (int i = 0; i < 5; i++) {
            int missionaries = moves[i][0], cannibals = moves[i][1];
            if (current->boat) {
                // Boat is on the right side
                int newMissionariesLeft = current->missionariesLeft + missionaries;
                int newCannibalsLeft = current->cannibalsLeft + cannibals;
                if (newMissionariesLeft <= 3 && newCannibalsLeft <= 3 &&
                    (newMissionariesLeft == 0 || newMissionariesLeft >= newCannibalsLeft) &&
                    (3 - newMissionariesLeft == 0 || 3 - newMissionariesLeft >= 3 - newCannibalsLeft)) {
                    State* newState = createState(newMissionariesLeft, newCannibalsLeft, false, current);
                    bool isVisited = false;
                    for (int j = 0; j < visitedCount; j++) {
                        if (isEqual(newState, visited[j])) {
                            isVisited = true;
                            break;
                        }
                    }
                    if (!isVisited) {
                        queue[rear++] = newState;
                        visited[visitedCount++] = newState;
                    }
                }
            } else {
                // Boat is on the left side
                int newMissionariesLeft = current->missionariesLeft - missionaries;
                int newCannibalsLeft = current->cannibalsLeft - cannibals;
                if (newMissionariesLeft >= 0 && newCannibalsLeft >= 0 &&
                    (newMissionariesLeft == 0 || newMissionariesLeft >= newCannibalsLeft) &&
                    (3 - newMissionariesLeft == 0 || 3 - newMissionariesLeft >= 3 - newCannibalsLeft)) {
                    State* newState = createState(newMissionariesLeft, newCannibalsLeft, true, current);
                    bool isVisited = false;
                    for (int j = 0; j < visitedCount; j++) {
                        if (isEqual(newState, visited[j])) {
                            isVisited = true;
                            break;
                        }
                    }
                    if (!isVisited) {
                        queue[rear++] = newState;
                        visited[visitedCount++] = newState;
                    }
                }
            }
        }
    }

    printf("No solution found.\n");
}

int main() {
    solve();
    return 0;
}
4. Missionaries and Cannibals (User Input Game Type)
Java Code: MissionariesAndCannibalsUserInput.java
java
Copy
import java.util.Scanner;

public class MissionariesAndCannibalsUserInput {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter number of missionaries: ");
        int missionaries = scanner.nextInt();
        System.out.print("Enter number of cannibals: ");
        int cannibals = scanner.nextInt();

        // Modify the solve method in MissionariesAndCannibalsBFS to accept parameters
        MissionariesAndCannibalsBFS.solve(missionaries, cannibals);
    }
}
C Code: MissionariesAndCannibalsUserInput.c
c
Copy
#include <stdio.h>

void solve(int missionaries, int cannibals);

int main() {
    int missionaries, cannibals;
    printf("Enter number of missionaries: ");
    scanf("%d", &missionaries);
    printf("Enter number of cannibals: ");
    scanf("%d", &cannibals);

    solve(missionaries, cannibals);
    return 0;
}
5. BFS (Best First Search) for Shortest Path
Java Code: BFSShortestPath.java
java
Copy
import java.util.*;

public class BFSShortestPath {
    static void bfs(int[][] graph, int start, int end) {
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[graph.length];
        int[] parent = new int[graph.length];
        Arrays.fill(parent, -1);

        queue.add(start);
        visited[start] = true;

        while (!queue.isEmpty()) {
            int current = queue.poll();

            if (current == end) {
                System.out.println("Shortest path:");
                printPath(parent, end);
                return;
            }

            for (int neighbor = 0; neighbor < graph.length; neighbor++) {
                if (graph[current][neighbor] == 1 && !visited[neighbor]) {
                    queue.add(neighbor);
                    visited[neighbor] = true;
                    parent[neighbor] = current;
                }
            }
        }

        System.out.println("No path found.");
    }

    static void printPath(int[] parent, int end) {
        if (end == -1) return;
        printPath(parent, parent[end]);
        System.out.print(end + " ");
    }

    public static void main(String[] args) {
        int[][] graph = {
            {0, 1, 1, 0, 0},
            {1, 0, 0, 1, 0},
            {1, 0, 0, 1, 1},
            {0, 1, 1, 0, 1},
            {0, 0, 1, 1, 0}
        };
        int start = 0, end = 4;
        bfs(graph, start, end);
    }
}
C Code: BFSShortestPath.c
c
Copy
#include <stdio.h>
#include <stdbool.h>

#define MAX 100

void bfs(int graph[MAX][MAX], int n, int start, int end) {
    int queue[MAX], front = 0, rear = 0;
    bool visited[MAX] = {false};
    int parent[MAX];
    for (int i = 0; i < n; i++) parent[i] = -1;

    queue[rear++] = start;
    visited[start] = true;

    while (front < rear) {
        int current = queue[front++];

        if (current == end) {
            printf("Shortest path:\n");
            printPath(parent, end);
            return;
        }

        for (int neighbor = 0; neighbor < n; neighbor++) {
            if (graph[current][neighbor] == 1 && !visited[neighbor]) {
                queue[rear++] = neighbor;
                visited[neighbor] = true;
                parent[neighbor] = current;
            }
        }
    }

    printf("No path found.\n");
}

void printPath(int parent[], int end) {
    if (end == -1) return;
    printPath(parent, parent[end]);
    printf("%d ", end);
}

int main() {
    int graph[MAX][MAX] = {
        {0, 1, 1, 0, 0},
        {1, 0, 0, 1, 0},
        {1, 0, 0, 1, 1},
        {0, 1, 1, 0, 1},
        {0, 0, 1, 1, 0}
    };
    int n = 5, start = 0, end = 4;
    bfs(graph, n, start, end);
    return 0;
}
This is the complete implementation for all the assignments in both Java and C. Each problem is in a separate file as requested. Let me know if you need further assistance!